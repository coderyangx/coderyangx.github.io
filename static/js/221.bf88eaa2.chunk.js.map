{"version":3,"file":"static/js/221.bf88eaa2.chunk.js","mappings":"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","sources":["pages/Article/index.js","store/login.Store.js","store/user.Store.js","store/channel.Store.js","store/index.js"],"sourcesContent":["import img404 from '@/assets/error.png'\nimport './index.scss'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Table, Tag, Space, Card, Breadcrumb, Form, Button, Radio, DatePicker, Select } from 'antd'\nimport 'moment/locale/zh-cn'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\nimport { useEffect, useState } from 'react'\nimport { http } from '@/utils'\nimport { useStore } from '@/store'\n\nconst { Option } = Select\nconst { RangePicker } = DatePicker\n\nconst Article = () => {\n  const { channelStore } = useStore()\n\n  // 文章列表管理 统一管理数据 将来修改给setArticleData传对象\n  const [articleData, setArticleData] = useState({\n    list: [],// 文章列表\n    count: 0 // 文章数量\n  })\n\n  // 文章参数管理\n  const [params, setParams] = useState({\n    page: 1,\n    per_page: 10\n  })\n  // 获取文章列表\n  useEffect(() => {\n    const loadList = async () => {\n      const res = await http.get('/mp/articles', { params })\n      const { results, total_count } = res.data\n      setArticleData({\n        list: results,\n        count: total_count\n      })\n    }\n    loadList()\n  }, [params])\n\n  /* 表单筛选功能实现 */\n  const onFinish = (values) => {\n    const { channel_id, date, status } = values\n    // 数据处理\n    const _params = {}\n    // 格式化status\n    _params.status = status\n   \n    // 初始化频道\n    if (channel_id) {\n      _params.channel_id = channel_id\n    }\n    // 初始化时间\n    if (date) {\n      _params.begin_pubdate = date[0].format('YYYY-MM-DD')\n      _params.end_pubdate = date[1].format('YYYY-MM-DD')\n    }\n    // 修改params数据 引起接口的重新发送 对象的合并是一个整体覆盖 改了对象的整体引用\n    setParams({\n      ...params,\n      ..._params\n    })\n  }\n  // 翻页实现\n  const pageChange = (page) => {\n    setParams({\n      ...params,\n      page\n    })\n  }\n\n  const formatStatus = (type) => {\n    const TYPES = {\n      1: <Tag color=\"red\">审核失败</Tag>,\n      2: <Tag color=\"green\">审核成功</Tag>\n    }\n    return TYPES[type]\n  }\n\n  // 删除文章\n  const delArticle = async (data) => {\n    await http.delete(`/mp/articles/${data.id}`)\n    // 刷新一下列表\n    setParams({\n      ...params,\n      page: 1\n    })\n  }\n\n  // 编辑文章\n  const navigate = useNavigate()\n  const goPublish = (data) => {\n    navigate(`/publish?id=${data.id}`)\n  }\n\n  const columns = [\n    {\n      title: '封面',\n      dataIndex: 'cover',\n      width: 120,\n      render: cover => {\n        return <img src={cover.images[0] || img404} width={80} height={60} alt=\"\" />\n      }\n    },\n    {\n      title: '标题',\n      dataIndex: 'title',\n      width: 220\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      render: data => formatStatus(data)\n    },\n    {\n      title: '发布时间',\n      dataIndex: 'pubdate'\n    },\n    {\n      title: '阅读数',\n      dataIndex: 'read_count'\n    },\n    {\n      title: '评论数',\n      dataIndex: 'comment_count'\n    },\n    {\n      title: '点赞数',\n      dataIndex: 'like_count'\n    },\n    {\n      title: '操作',\n      render: data => {\n        return (\n          <Space size=\"middle\">\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              icon={<EditOutlined />}\n              onClick={() => goPublish(data)} />\n            <Button\n              type=\"primary\"\n              danger\n              shape=\"circle\"\n              icon={<DeleteOutlined />}\n              onClick={() => delArticle(data)}\n            />\n          </Space>\n        )\n      },\n      fixed: 'right'\n    }\n  ]\n\n  return (\n    <div>\n      {/* 筛选区域 */}\n      <Card\n        title={\n          <Breadcrumb separator=\">\">\n            <Breadcrumb.Item>\n              <Link to=\"/home\">首页</Link>\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>内容管理</Breadcrumb.Item>\n          </Breadcrumb>\n        }\n        style={{ marginBottom: 20 }}\n      >\n        <Form\n          onFinish={onFinish}\n          initialValues={{ status: null }}>\n          <Form.Item label=\"状态\" name=\"status\">\n            <Radio.Group>\n              <Radio value={null}>全部</Radio>\n              <Radio value={0}>草稿</Radio>\n              <Radio value={1}>待审核</Radio>\n              <Radio value={2}>审核通过</Radio>\n              <Radio value={3}>审核失败</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item label=\"频道\" name=\"channel_id\">\n            <Select\n              placeholder=\"请选择文章频道\"\n              style={{ width: 120 }}\n            >\n              {channelStore.channelList.map(channel => <Option key={channel.id} value={channel.id}>{channel.name}</Option>)}\n            </Select>\n          </Form.Item>\n\n          <Form.Item label=\"日期\" name=\"date\">\n            {/* 传入locale属性 控制中文显示*/}\n            <RangePicker locale={locale}></RangePicker>\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 80 }}>\n              筛选\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n      {/* 文章列表区域 */}\n      <Card title={`根据筛选条件共查询到 ${articleData.count} 条结果：`}>\n        <Table\n          rowKey=\"id\"\n          columns={columns}\n          dataSource={articleData.list}\n          pagination={\n            {\n              pageSize: params.per_page,\n              total: articleData.count,\n              onChange: pageChange,\n              current: params.page\n            }\n          }\n          bordered\n        />\n      </Card>\n    </div>\n  )\n}\n\nexport default observer(Article)","// login module\nimport { makeAutoObservable } from 'mobx'\nimport { http, setToken, getToken, removeToken } from '@/utils'\nclass LoginStore {\n  token = getToken() || ''\n  constructor() {\n    // 响应式\n    makeAutoObservable(this)\n  }\n  getToken = async ({ mobile, code }) => {\n    // 调用登录接口\n    const res = await http.post('http://geek.itheima.net/v1_0/authorizations', {\n      mobile, code\n    })\n    // 存入token\n    this.token = res.data.token\n    // 存入ls\n    setToken(this.token)\n  }\n  // 退出登录\n  loginOut = () => {\n    this.token = ''\n    removeToken()\n  }\n}\n\nexport default LoginStore","import { makeAutoObservable } from 'mobx'\nimport { http } from '@/utils'\n\nclass UserStore {\n  userInfo = {}\n  constructor() {\n    makeAutoObservable(this)\n  }\n  getUserInfo = async () => {\n    // 调用接口获取数据\n    const res = await http.get('/user/profile')\n    this.userInfo = res.data\n  }\n}\n\nexport default UserStore","import { makeAutoObservable } from 'mobx'\nimport { http } from '@/utils'\nclass ChannelStore {\n  channelList = []\n  constructor() {\n    makeAutoObservable(this)\n  }\n  // article publish 哪里调用这个函数呢？\n  loadChannelList = async () => {\n    const res = await http.get('/channels')\n    this.channelList = res.data.channels\n  }\n}\n\nexport default ChannelStore","// 把所有的模块做统一处理\n// 导出一个统一的方法 useStore\nimport React from \"react\"\nimport LoginStore from \"./login.Store\"\nimport UserStore from \"./user.Store\"\nimport ChannelStore from \"./channel.Store\"\n\nimport { configure } from \"mobx\"\nconfigure({\n  enforceActions: \"never\",\n})\n\n\nclass RootStore {\n  constructor() {\n    this.loginStore = new LoginStore()\n    this.userStore = new UserStore()\n    this.channelStore = new ChannelStore()\n    // ...\n  }\n}\n\n// 实例化根\n// 导出useStore context\nconst rootStore = new RootStore()\nconst context = React.createContext(rootStore)\n\nconst useStore = () => React.useContext(context)\n\nexport { useStore }"],"names":["Option","Select","RangePicker","DatePicker","observer","channelStore","useStore","useState","list","count","articleData","setArticleData","page","per_page","params","setParams","useEffect","loadList","http","res","data","results","total_count","delArticle","id","navigate","useNavigate","columns","title","dataIndex","width","render","cover","src","images","height","alt","type","color","size","shape","icon","EditOutlined","onClick","goPublish","danger","DeleteOutlined","fixed","separator","to","style","marginBottom","onFinish","values","channel_id","date","status","_params","begin_pubdate","format","end_pubdate","initialValues","label","name","value","placeholder","channelList","map","channel","locale","htmlType","marginLeft","rowKey","dataSource","pagination","pageSize","total","onChange","current","bordered","LoginStore","token","getToken","mobile","code","setToken","loginOut","removeToken","makeAutoObservable","this","UserStore","userInfo","getUserInfo","ChannelStore","loadChannelList","channels","configure","enforceActions","rootStore","RootStore","loginStore","userStore","context","React"],"sourceRoot":""}